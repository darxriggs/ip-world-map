#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'ostruct'
require 'date'
require 'ip-world-map'
require 'RMagick'

class App
  VERSION = '0.0.1'

  attr_reader :options

  def initialize arguments, stdin
    @arguments = arguments
    @stdin = stdin

    set_defaults
  end

  def run
    if parsed_arguments? && arguments_valid?
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      output_options if @options.verbose
      process_command
      puts "\nFinished at #{DateTime.now}" if @options.verbose
    else
      output_help
      exit 1
    end
  end

  protected

  def set_defaults
    @options = OpenStruct.new({
      :verbose            => false,
      :quiet              => false,
      :map_filename       => File.join(File.dirname(__FILE__), '..' , 'resources', 'maps', 'earthmap-1920x960.tif'),
      :map_width          => 800,
      :map_height         => 400,
      :frames_per_second  => 25,
      :fill_dot_color     => 'red',
      :fill_dot_scale     => 10,
      :fill_dot_opacity   => 1.0,
      :fill_dot_lifetime  => 15,
      :time_format        => nil,
      :group_seconds      => 24 * 1 * 60 * 60,
      :output_format      => 'jpg',
      :animate            => false
    })
  end

  def parsed_arguments?
    @opts = opts = OptionParser.new

    opts.banner = 'Usage: ip-world-map [options] log_file1 [logfile2] ...'

    opts.on('--version', 'Display the version') do
      output_version
      exit 0
    end

    opts.on('-h', '--help', 'Display this help message') do
      output_help
      exit 0
    end

    opts.on('-v', '--verbose', 'Verbose output') do
      @options.verbose = true
    end

    opts.on('--map-filename VALUE', 'The image to use as background') do |filename|
      raise 'invalid map file' unless File.readable? filename
      @options.map_filename = filename
    end

    opts.on('--resolution VALUE', '(eg.: 640x480)') do |resolution|
      raise 'invalid resolution format' unless resolution =~ /^[0-9]+x[0-9]+$/
      width, height = resolution.split('x').collect{|v| v.to_i}
      @options.map_width  = width
      @options.map_height = height
    end

    opts.on('--fps VALUE', 'Animation frames per second (eg.: 25)') do |fps|
      raise 'invalid fps format' unless fps =~ /^[1-9][0-9]*$/
      @options.frames_per_second = fps.to_i
    end

    opts.on('--fill-dot-color VALUE', "(eg.: red, 'rgb(255,0,0)', '#FF0000')") do |color|
      Magick::Pixel.from_color color rescue raise 'invalid color (see help for examples)'
      @options.fill_dot_color = color
    end

    opts.on('--fill-dot-scale VALUE', '(eg.: 10.0)') do |scale|
      raise 'invalid dot scale' unless scale =~ /^[1-9][0-9]*([.][0-9]*)?$/
      @options.fill_dot_scale = scale.to_f
    end

    opts.on('--fill-dot-opacity VALUE', 'range 0.0-1.0 (eg.: 0.0, 0.5, 1.0)') do |opacity|
      raise 'invalid dot opacity' unless opacity =~ /^(0([.][0-9]*)?|1([.]0*)?)$/
      @options.fill_dot_opacity = opacity.to_f
    end

    opts.on('--fill-dot-lifetime VALUE', '(eg.: 15)') do |lifetime|
      raise 'invalid dot lifetime' unless lifetime =~ /^[1-9][0-9]*$/
      @options.fill_dot_lifetime = lifetime.to_i
    end

    opts.on('--time-slot VALUE', 'real life time visualized per video frame (eg.: 10secs, 1min, 99hours, 1day)') do |slot|
      raise 'invalid time slot' unless slot =~ /^[1-9][0-9]*(sec|min|hour|day)s?$/
      value = slot.scan(/[0-9]+/)[0].to_i
      unit  = slot.scan(/[a-z]+[^s]/)[0]
      unit2secs = {'sec' => 1, 'min' => 60, 'hour' => 60*60, 'day' => 24*60*60}
      @options.group_seconds = value * unit2secs[unit]
    end

    # TODO
    # opts.on('--time-format', 'gets auto-detected if not specified') { |v| @options.time_format = v }

    opts.on('--output-format VALUE', 'image format (e.g.: gif, jpg, png) or video format (avi, mpg, mp4)') do |format|
      video_formats = %w[avi mpg mp4]
      is_supported = Magick.formats.any?{ |supported_format, properties| supported_format.upcase == format.upcase && properties.include?('w') }
      is_supported |= video_formats.any?{ |supported_format| supported_format.upcase == format.upcase }
      raise 'invalid output format' unless is_supported
      @options.output_format = format
    end

    opts.on('--[no-]animate', 'generate an image or a video') do |animate|
      @options.animate = animate
    end

    begin
      opts.parse!(@arguments)
      @log_files = Dir.glob(@arguments)
      raise 'no log files given' if @log_files.empty?
      raise 'invalid log file given' unless @log_files.all?{|file| File.readable? file}
      process_options
    rescue
      puts 'Error: ' + $!
      return false
    end

    true
  end

  # Performs post-parse processing on options
  def process_options
    $visualization_config = @options
  end

  def output_options
    puts 'Options:'
    @options.marshal_dump.sort{|a,b| a[0].to_s <=> b[0].to_s}.each do |name, val|
      puts "  #{name} = #{val}"
    end
  end

  # True if required arguments were provided
  def arguments_valid?
    video_formats = %w[avi mpg mp4]
    is_video_format = video_formats.any?{ |video_format| video_format == @options.output_format.downcase }
    return false if !@options.animate &&  is_video_format
    return false if  @options.animate && !is_video_format
    true
  end

  def output_help
    puts @opts.help
  end

  def output_version
    puts "#{File.basename(__FILE__)} version #{VERSION}"
  end

  def process_command
    visualize @log_files
  end
end

# Create and run the application
app = App.new(ARGV, STDIN)
app.run

